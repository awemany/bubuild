# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# secrets / password in a file for now
c['secretsProviders'] = [secrets.SecretInAFile(dirname="/home/bubot/buildbot-secrets")]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("bu-worker-1", util.Secret("bu-worker-1-password"))]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': "tcp:9989:interface=127.0.0.1"}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'https://github.com/BitcoinUnlimited/BitcoinUnlimited.git',
    workdir='gitpoller-workdir-bu-dev', branch='dev', category='bu-dev',
    pollInterval=300))

# to be extended
buildbot_users=["awemany"]

for bbu in buildbot_users:
    c['change_source'].append(changes.GitPoller(
        'https://github.com/%s/BitcoinUnlimited.git' % bbu,
        workdir='gitpoller-workdir-%s-buildbot' % bbu, branch='buildbot',
        category='%s-buildbot' % bbu,
        pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="bu-dev",
    change_filter=util.ChangeFilter(
        category='bu-dev',
        branch='dev'),
    treeStableTimer=300.,
    builderNames=["make_dev"]))

for bbu in buildbot_users:
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=bbu,
        change_filter=util.ChangeFilter(
            category='%s-buildbot' % bbu,
            branch='buildbot'),
        treeStableTimer=300.,
        builderNames=["make_%s" % bbu]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["make_dev"]+["make_%s" % bbu for bbu in buildbot_users]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def makeStepFactory(repourl='https://github.com/BitcoinUnlimited/BitcoinUnlimited.git', branch='dev', output_basedir="~/public_html/build-results"):
    factory = util.BuildFactory()
    # check out the source

    checkout = steps.Git(repourl=repourl,
                         mode='full', branch=branch, haltOnFailure = True)

    autogen = steps.ShellCommand(command=["./autogen.sh"],
                                 haltOnFailure = True, name = 'autogen.sh')

    checker_options=("-enable-checker security.insecureAPI.rand "
                     "-enable-checker security.insecureAPI.strcpy ")

    # clang static analysis first
    clang_sa_configure = steps.ShellCommand(command='scan-build-5.0 ./configure --disable-bench --disable-tests --with-gui=no CXXFLAGS="-Wno-c++0x-compat -std=c++11"',
                                        haltOnFailure = True, name = 'clang_static_analysis_configure')

    # ignore build failures
    # TODO: Fix this clang static-analysis build to NOT fail in the linker stage!
    clang_sa_make = steps.ShellCommand(command='scan-build-5.0 %s -o html make -k -j25; true' % checker_options,
                                               haltOnFailure = True, name = 'clang_static_analysis_make')

    clang_sa_output_ensure_dir = steps.ShellCommand(name = 'clang_static_analysis_ensure_dir',
                                                    command = "mkdir -p %s/`git describe --long`/static-analysis" % output_basedir, haltOnFailure = True)

    clang_sa_copy_html = steps.ShellCommand(name = "clang_static_analysis_copy_html",
                                       command = "cp -av html %s/`git describe --long`/static-analysis" % output_basedir, haltOnFailure = True)

    distclean = steps.ShellCommand(name = "distclean",
                                       command = "make distclean", haltOnFailure = True)

    configure = steps.ShellCommand(command=["./configure", "--with-gui=no", "--disable-bench", "--enable-lcov"],
                                   haltOnFailure = True, name = 'configure')

    make = steps.ShellCommand(command=["/usr/bin/make", "-j25"], haltOnFailure =
                              True, name = 'make')


    lcov_init = steps.ShellCommand(name = 'lcov_init',
                                   command=["lcov", "-z", "-d", "."], haltOnFailure = True)

    unit_tests  = steps.ShellCommand(name = 'unit_tests',
                                      command=["./src/test/test_bitcoin"], haltOnFailure = True)

    rpc_tests = steps.ShellCommand(name = 'rpc_tests',
                                      command=["flock", "/tmp/buildbot-rpctests", "./qa/pull-tester/rpc-tests.py","-parallel=16"], haltOnFailure = False)

    fuzz_tests = steps.ShellCommand(name = 'fuzz_tests',
                                      command="~/bubuild/fuzzcheck/fuzzcheck.py run ./src/test/test_bitcoin_fuzzy /home/bubot/bubuild/fuzz-cases/ /tmp/tmp-output.fuzz /tmp/tmp-summary-fuzz.dat", haltOnFailure = False)

    fuzz_result_copy = steps.ShellCommand(name = 'fuzz_result_copy',
                                        command = "cp -v /tmp/tmp-summary-fuzz.dat %s/`git describe --long`/fuzz-summary.txt" % output_basedir, haltOnFailure = True)

    # FIXME: why is this necessary?
    fuzz_result_chmod = steps.ShellCommand(name = 'fuzz_result_chmod',
                                        command = "chmod go+r %s/`git describe --long`/fuzz-summary.txt" % output_basedir, haltOnFailure = True)

    # note, due to a bug seemingly fixed in lcov commit 632c25a0d1f5e4d2f4fd5b28ce7c8b86d388c91f
    # lcov only works properly when absolute path names are given on the command line.
    combine_coverage = steps.ShellCommand(name = 'combine_coverage',
                                          command = "lcov -a `realpath unit.info` -a `realpath rpc.info` -a `realpath fuzzed.info` -o `realpath ./all.info`",
                                          haltOnFailure = False)


    def coverage(info_file, output_dir, collect=True):
        if collect:
            lcov_collect = steps.ShellCommand(name = 'lcov_collect',
                                              command=["lcov", "--no-external", "-c" , "-d" , ".", "-o", info_file], haltOnFailure = True)

        genhtml = steps.ShellCommand(name = 'genhtml',
                                     command=["genhtml", "--demangle-cpp", "-o" , output_dir, info_file], haltOnFailure = True)

        clean_dir = steps.ShellCommand(name = 'clean_dir',
                                        command = "rm -rf %s/`git describe --long`/%s" % (output_basedir, output_dir), haltOnFailure = True)

        ensure_dir = steps.ShellCommand(name = 'ensure_dir',
                                        command = "mkdir -p %s/`git describe --long`/%s" % (output_basedir, output_dir), haltOnFailure = True)

        copy_html = steps.ShellCommand(name = "copy_html",
                                       command = "cp -av %s %s/`git describe --long`/" % (output_dir, output_basedir), haltOnFailure = True)

        return ([lcov_collect] if collect else [])+[genhtml, clean_dir, ensure_dir, copy_html]



    for step in [checkout, autogen, clang_sa_configure, clang_sa_make, clang_sa_output_ensure_dir, clang_sa_copy_html,
                 distclean, configure, make] + [
            lcov_init, unit_tests] + coverage("unit.info", "cov_unit_tests") + [
            lcov_init, rpc_tests] + coverage("rpc.info", "cov_rpc_tests") + [
                lcov_init, fuzz_tests, fuzz_result_copy, fuzz_result_chmod ] + coverage("fuzzed.info", "cov_fuzz_tests") + [
                                 combine_coverage ] + coverage("all.info", "cov_all", False):
        factory.addStep(step)
    return factory

c['builders'] = []
c['builders'].append(util.BuilderConfig(name="make_dev",
                                        workernames=["bu-worker-1"],
                                        factory=makeStepFactory(output_basedir="~/public_html/build-results/dev")))

for bbu in buildbot_users:
    c['builders'].append(util.BuilderConfig(name="make_%s" % bbu,
                                            workernames=["bu-worker-1"],
                                            factory=makeStepFactory(repourl="https://github.com/%s/BitcoinUnlimited" % bbu,
                                                                    branch="buildbot",
                                                                    output_basedir="~/public_html/build-results/%s" % bbu)))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "BitcoinUnlimited fuzz/coverage/static-analysis"
c['titleURL'] = "https://github.com/BitcoinUnlimited/BitcoinUnlimited"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port="tcp:8010:interface=127.0.0.1",
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

### switch off usage reporting
c["buildbotNetUsageData"] = None
